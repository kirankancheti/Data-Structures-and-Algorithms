
import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class DAGTopologicalOrder {
	
	 public static void main(String[] args) throws FileNotFoundException {
			Scanner in;
			if (args.length > 0) {
			    File inputFile = new File(args[0]);
			    in = new Scanner(inputFile);
			} else {
			    in = new Scanner(System.in);
			}
			Graph g = Graph.readGraph(in, false);   // read undirected graph from stream "in"
			Queue<Vertex> Q = new LinkedList<>();

			for (Vertex u : g) {
			    u.seen = false;
			    u.parent = null;
			    u.distance = Integer.MAX_VALUE;
			}

			// Run BFS on every component
			for (Vertex src : g) {
			    if (!src.seen) {
				src.distance = 0;
				Q.add(src);
				src.seen = true;

				while (!Q.isEmpty()) {
				    Vertex u = Q.remove();
				    for (Edge e : u.Adj) {
					Vertex v = e.otherEnd(u);
					if (!v.seen) {
					    v.seen = true;
					    v.parent = u;
					    v.distance = u.distance + 1;
					    Q.add(v);
					} else {
					    if (u.distance == v.distance) {
						System.out.println("Graph is not bipartite");
						return;
					    }
					}
				    }
				}
			    }
			}
			System.out.println("Graph is bipartite");
			
		    }
	 
	  List<Vertex> toplogicalOrder1(Graph g) { 
	      /* Algorithm 1. Remove vertices with no incoming edges, one at a
	      	 time, along with their incident edges, and add them to a list.
	       */
		  List<Vertex> topologicalOrder=new LinkedList<>();
			Queue<Vertex> Q = new LinkedList<>();
			for (Vertex u : g) {
			    u.degree=u.revAdj.size();   
			    if(u.degree==0){
			    	Q.add(u);
			    }
			    
			}
			
			int top=1;
				while (!Q.isEmpty()) {
				    Vertex u = Q.remove();
				    u.top=top++;
				    topologicalOrder.add(u);
				    for (Edge e : u.Adj) {
					Vertex v = e.otherEnd(u);
					v.degree--;
					if(v.degree==0){
						Q.add(v);
					}
					}
				}
  
		  return topologicalOrder;
	   }
	  
	  
	  Stack<Vertex> toplogicalOrder2(Graph g) {
	      /* Algorithm 2. Run DFS on g and push nodes to a stack in the
	      	 order in which they finish.  Write code without using global variables.
	       */
		  Queue<Vertex> Q = new LinkedList<>();
          

			// Run DFS on every component
			for (Vertex src : g) {
			    if (!src.seen) {
				src.distance = 0;
				Q.add(src);
				src.seen = true;
				}
			    }
		  return null;
	   }
	  
	  public void DepthFirstSearch(Graph g,Vertex src){ 
		  src.seen = true;		  
				    for (Edge e : src.Adj) {
						Vertex v = e.otherEnd(src);
						if (!v.seen) {
							DepthFirstSearch(g, v);
						} 
						}		  
	  }
}
