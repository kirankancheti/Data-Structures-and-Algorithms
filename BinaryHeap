import java.util.Comparator;

public class BinaryHeap<T> implements PQ<T> {
    T[] pq;
    Comparator<T> c;
    /**
     * 
     */
    private int size;
    /** Build a priority queue with a given array q */
    BinaryHeap(T[] q, Comparator<T> comp) {
	pq = q;
	c = comp;
	buildHeap();
    }

    public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	/** Create an empty priority queue of given maximum size */
    BinaryHeap(int n, Comparator<T> comp) { /* to be implemented */
    this((T[])new Object[n],comp);
    }

    public void insert(T x) {
	add(x);
    }

    public T deleteMin() {
	return remove();
    }

    public T min() { 
	return peek();
    }

    public void add(T x) { /* to be implemented */
    	if (size==pq.length){
    		reSize();
    	}
    	pq[++size]=x;
    	
    	percolateUp(size);
    }
    
    
    public void reSize(){
    	
         T[] temp = (T[]) new Object[2*size];
         for (int i = 1; i <= size; i++) {
             temp[i] = pq[i];
         }
         size=2*size;
         pq = temp;
    	
    }

    public T remove() { /* to be implemented */
    T min=	pq[1];
    pq[1]=pq[size--];
    percolateDown(1);
	return min;
    }

    public T peek() { /* to be implemented */
	return pq[1];
    }

    /** pq[i] may violate heap order with parent */
    void percolateUp(int i) { /* to be implemented */
    	
    	pq[0]=pq[i];
    	
    	while(i>1){
    	if(c.compare(pq[0], pq[i/2])<0){
    		pq[i]=pq[i/2];
    		i=i/2;
    	}
    	pq[i]=pq[0];
    }
    }

    /** pq[i] may violate heap order with children */
    void percolateDown(int i) { /* to be implemented */
    	pq[0]=pq[i];
    	
    	while(2*i<=size){
    	if((2*i+1)<=size){ //Two children
    	
    		int minChildPosition= (c.compare(pq[2*i],pq[2*i+1])<0) ?2*i:2*i+1 ;
        	
        	
        	if(c.compare(pq[minChildPosition], pq[0])>0){
        		pq[i]=pq[minChildPosition];
            	i=minChildPosition;
        	}
        	else{
        		break;
        	}
    	}
    	else if(2*i==size&&c.compare(pq[2*i],pq[0])<0){  //One child
       		pq[i]=pq[2*i];
       		i=2*i;
       	}
    	else{
    		break;
    	}
    	}
    	pq[i]=pq[0];
    }

    /** Create a heap.  Precondition: none. */
    void buildHeap() {
    	for(int i=size/2;i>0;i++){
    		percolateDown(i);
    	}
    }

    /* sort array A[1..n].  A[0] is not used. 
       Sorted order depends on comparator used to buid heap.
       min heap ==> descending order
       max heap ==> ascending order
     */
    public static<T> void heapSort(T[] A, Comparator<T> comp) { /* to be implemented */
    	BinaryHeap<T> heap = new BinaryHeap<T>(A, comp);
    	for(int i=heap.size;i>0;i--){
    		heap.exchange(A[1],A[i]);
    		heap.size--;
    		heap.percolateDown(1);
    	}
    }
    
	private void exchange(T t, T t2) {
		T temp = t;
		t = t2;
		t2 = temp;
	}
}
